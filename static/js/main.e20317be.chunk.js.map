{"version":3,"sources":["NewsCard.js","NewsCollection.js","App.js","serviceWorker.js","index.js"],"names":["NewsCard","news","className","style","width","urlToImage","src","alt","title","source","name","href","url","target","rel","NewsCollection","newsArray","map","index","App","fetchResponse","fetch","method","headers","body","JSON","stringify","input","state","page","then","response","json","data","setState","articles","console","log","catch","err","refrshResponse","getResponse","event","window","scrollTo","top","behavior","length","preventDefault","getNext","onInputChange","value","onClick","pageClickNext","pageClickPrevious","this","type","placeholder","aria-label","onChange","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAmBeA,G,YAhBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OAEI,yBAAKC,UAAU,yCAAyCC,MAAO,CAACC,MAAO,UAC9C,KAApBH,EAAKI,WAAoB,yBAAKC,IAAI,mEAAmEJ,UAAU,eAAeK,IAAI,QAAQ,yBAAKD,IAAKL,EAAKI,WAAYH,UAAU,eAAeK,IAAI,QACnM,yBAAKL,UAAU,aACf,wBAAIA,UAAU,cAAcD,EAAKO,OACjC,uBAAGN,UAAU,aAAaD,EAAKQ,OAAOC,MACtC,uBAAGC,KAAMV,EAAKW,IAAKV,UAAU,2BAA4BW,OAAO,SAASC,IAAI,uBAA7E,iBCSGC,EAjBM,SAAC,GAAe,IAAdC,EAAa,EAAbA,UAEnB,OAEI,yBAAKd,UAAU,MAEVc,EAAUC,KAAI,SAAChB,EAAMiB,GAClB,OAAO,kBAAC,EAAD,CAAUjB,KAAMA,SC6GxBkB,E,YAjHb,aAAc,IAAD,8BACX,+CAQFC,cAAe,WACbC,MAAM,gDAAiD,CAC/CC,OAAQ,OACRC,QAAS,CAAC,eAAiB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,EAAKC,MAAMD,MAClBE,KAAM,EAAKD,MAAMC,SAGlBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAClB,UAAWiB,EAAKE,WAAW,WAAMC,QAAQC,IAAI,qBACzEC,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,OApBvB,EAsBbC,eAAgB,WACdnB,MAAM,gDAAiD,CAC/CC,OAAQ,OACRC,QAAS,CAAC,eAAiB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,GACPE,KAAM,EAAKD,MAAMC,SAGlBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAClB,UAAW,KAAK,WAAM,EAAKI,sBACvDkB,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,OAjCvB,EAoCbE,YAAc,SAACC,GACbC,OAAOC,SAAS,CAACC,IAAK,EAAGC,SAAU,WAChC,EAAKlB,MAAMD,MAAMoB,QAClBX,QAAQC,IAAI,gBACZ,EAAKH,SAAS,CAACH,UAAU,IACzB,EAAKX,gBACLsB,EAAMM,mBAINZ,QAAQC,IAAI,kBACZ,EAAKH,SAAS,CAACH,UAAU,MA/ChB,EAmDfkB,QAAU,WACL,EAAKrB,MAAMD,MAAMoB,QAClBX,QAAQC,IAAI,gBACZ,EAAKH,SAAS,CAACH,UAAU,IACzB,EAAKX,kBAILgB,QAAQC,IAAI,kBACZ,EAAKH,SAAS,CAACH,UAAU,MA5Dd,EAgEfmB,cAAe,SAACR,GACd,EAAKR,SAAS,CAACP,MAAOe,EAAM7B,OAAOsC,SAjEtB,EAoEfC,QAAU,WACRhB,QAAQC,IAAI,sBArEC,EAuEfgB,cAAgB,WACdV,OAAOC,SAAS,CAACC,IAAK,EAAGC,SAAU,WACnC,EAAKZ,SAAS,CAACL,KAAM,EAAKD,MAAMC,KAAK,IAAI,WAAO,EAAKoB,cAzExC,EA4EfK,kBAAoB,WACM,IAApB,EAAK1B,MAAMC,OAIbc,OAAOC,SAAS,CAACC,IAAK,EAAGC,SAAU,WACnC,EAAKZ,SAAS,CAACL,KAAM,EAAKD,MAAMC,KAAK,IAAI,WAAM,EAAKoB,eAhFpD,EAAKrB,MAAQ,CACXG,UAAU,EACVJ,MAAO,GACPX,UAAW,GACXa,KAAM,GANG,E,sEAsFX,OACE,6BACA,8BACE,yBAAK3B,UAAU,gDACnB,uBAAGA,UAAU,OAAOkD,QAASG,KAAKH,SAAlC,mBACyB,IAAxBG,KAAK3B,MAAMG,SAAoB,0BAAM7B,UAAU,mCAChD,4BAAQsD,KAAK,SAAStD,UAAU,+BAA+BkD,QAASG,KAAKD,mBAA7E,YACE,2BAAOpD,UAAU,uBAAuBsD,KAAK,SAASC,YAAY,SAASC,aAAW,SAASC,SAAUJ,KAAKL,gBAC9G,4BAAQhD,UAAU,uCAAuCsD,KAAK,SAASJ,QAASG,KAAKd,aAArF,UACA,4BAAQe,KAAK,SAAStD,UAAU,+BAA+BkD,QAASG,KAAKF,eAA7E,SAEF,0BAAMnD,UAAU,mCACd,2BAAOA,UAAU,uBAAuBsD,KAAK,SAASC,YAAY,SAASC,aAAW,SAASC,SAAUJ,KAAKL,gBAC9G,4BAAQhD,UAAU,uCAAuCsD,KAAK,SAASJ,QAASG,KAAKd,aAArF,WAEF,4BAAQe,KAAK,SAAStD,UAAU,kCAAhC,YAEJ,yBAAKA,UAAU,WACRqD,KAAK3B,MAAMG,SAAW,kBAAC,EAAD,CAAgBJ,MAAO4B,KAAK3B,MAAMD,MAAOX,UAAWuC,KAAK3B,MAAMZ,YAAa,8BACpGuC,KAAK3B,MAAMG,SAAW,8BAAc,6BAAS7B,UAAU,mBAAkB,yBAAKA,UAAU,gCAA+B,wBAAIA,UAAU,kCAAd,2F,GA1G1G0D,IAAMC,WCOJC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.e20317be.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst NewsCard = ({news}) => {\r\n    return (\r\n        \r\n        <div className=\"card pa3 mr2 ma2 bw2 grow shadow-5 dib\" style={{width: '18rem'}}>\r\n            {news.urlToImage === '' ? <img src='https://farm5.staticflickr.com/4363/36346283311_74018f6e7d_o.png' className=\"card-img-top\" alt=\"...\"/>:<img src={news.urlToImage} className=\"card-img-top\" alt=\"...\"/>}\r\n            <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{news.title}</h5>\r\n            <p className=\"card-text\">{news.source.name}</p>\r\n            <a href={news.url} className=\"btn btn-primary b center\"  target=\"_blank\" rel=\"noopener noreferrer\">See Story</a>\r\n        </div>\r\n        </div>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default NewsCard;","import React from 'react';\r\nimport './NewsCollection.css'\r\nimport NewsCard from './NewsCard';\r\nconst NewsCollection=({newsArray})=>{\r\n    \r\n    return (\r\n    \r\n        <div className='tc'>\r\n        \r\n            {newsArray.map((news, index)=>{\r\n                return <NewsCard news={news}/>\r\n            })\r\n            }\r\n        </div>\r\n        \r\n        \r\n\r\n    );\r\n}\r\n\r\nexport default NewsCollection;\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport NewsCollection from './NewsCollection';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      response: false,\n      input: '',\n      newsArray: [],\n      page: 1\n    }\n  }\n  fetchResponse =() => {\n    fetch('https://serene-taiga-79150.herokuapp.com/pass', {\n            method: 'post',\n            headers: {'Content-Type' : 'application/json'},\n            body: JSON.stringify({\n              input: this.state.input,\n              page: this.state.page\n            })\n          })\n            .then(response => response.json())\n            .then(data => this.setState({newsArray: data.articles}, ()=> {console.log('Logging Now')}))\n            .catch(err => console.log(err));\n  }  \n  refrshResponse =() => {\n    fetch('https://serene-taiga-79150.herokuapp.com/pass', {\n            method: 'post',\n            headers: {'Content-Type' : 'application/json'},\n            body: JSON.stringify({\n              input: '',\n              page: this.state.page\n            })\n          })\n            .then(response => response.json())\n            .then(data => this.setState({newsArray: []}, ()=> {this.fetchResponse()}))\n            .catch(err => console.log(err));\n  }\n\n  getResponse = (event) => {\n    window.scrollTo({top: 0, behavior: 'smooth'});\n    if(this.state.input.length){\n      console.log('this side up');\n      this.setState({response: true})\n      this.fetchResponse();\n      event.preventDefault();\n      \n    }\n    else{\n      console.log('this side down')\n      this.setState({response: false})\n    }\n}\n\ngetNext = () => {\n  if(this.state.input.length){\n    console.log('this side up');\n    this.setState({response: true})\n    this.fetchResponse();\n    \n  }\n  else{\n    console.log('this side down')\n    this.setState({response: false})\n  }\n}\n\nonInputChange =(event) => {\n  this.setState({input: event.target.value});\n\n}\nonClick = () => {\n  console.log('Does not refreshh');\n}\npageClickNext = () => {\n  window.scrollTo({top: 0, behavior: 'smooth'});\n  this.setState({page: this.state.page+1}, ()=> { this.getNext()});\n  \n}\npageClickPrevious = () => {\n  if (this.state.page === 1){\n\n  }\n  else{\n    window.scrollTo({top: 0, behavior: 'smooth'});\n    this.setState({page: this.state.page-1}, ()=> {this.getNext()});\n  }\n}\n  render(){\n    return(\n      <div>\n      <div></div>\n        <nav className=\"navbar fixed-top navbar-expand-lg navbarmain\">\n    <p className='para' onClick={this.onClick}>GLOBAL NEWS 10</p>\n    {this.state.response === true ? <form className=\"center form-inline my-2 my-lg-0\">\n    <button type=\"button\" className=\"btn btn-outline-dark mr2 ma2\" onClick={this.pageClickPrevious}>Previous</button>\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" onChange={this.onInputChange}/>\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" onClick={this.getResponse}>Search</button>\n      <button type=\"button\" className=\"btn btn-outline-dark mr2 ma2\" onClick={this.pageClickNext}>Next</button>\n    </form>: \n    <form className=\"center form-inline my-2 my-lg-0\">\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" onChange={this.onInputChange}/>\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" onClick={this.getResponse}>Search</button>\n    </form>}\n    <button type=\"button\" className=\"btn btn-outline-success btnsuc\">Sign In</button>\n</nav>\n<div className=\"navdiv\"></div>\n      {this.state.response ? <NewsCollection input={this.state.input} newsArray={this.state.newsArray}/>:<div></div>}\n    {this.state.response ? <div></div> : <article className='vh-100 dt w-100'><div className='dtc v-mid tc white ph3 ph4-l'><h1 className='f6 f2-m f-subheadline-l fw6 tc'>Search for the latest news sorted by relevance, popularity, source and keywords.</h1></div></article>}\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}